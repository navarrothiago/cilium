// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v2/proto/spiffe/workload/workload.proto

package workload // import "github.com/spiffe/go-spiffe/v2/proto/spiffe/workload"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import structpb "google.golang.org/protobuf/types/known/structpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type X509SVIDRequest struct {
	// Credentials of the workload to attestate.
	// If not set the caller is attestated.
	//
	// Types that are valid to be assigned to Credentials:
	//	*X509SVIDRequest_Pid
	//	*X509SVIDRequest_PodUuid
	Credentials          isX509SVIDRequest_Credentials `protobuf_oneof:"credentials"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *X509SVIDRequest) Reset()         { *m = X509SVIDRequest{} }
func (m *X509SVIDRequest) String() string { return proto.CompactTextString(m) }
func (*X509SVIDRequest) ProtoMessage()    {}
func (*X509SVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{0}
}
func (m *X509SVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509SVIDRequest.Unmarshal(m, b)
}
func (m *X509SVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509SVIDRequest.Marshal(b, m, deterministic)
}
func (dst *X509SVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509SVIDRequest.Merge(dst, src)
}
func (m *X509SVIDRequest) XXX_Size() int {
	return xxx_messageInfo_X509SVIDRequest.Size(m)
}
func (m *X509SVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_X509SVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_X509SVIDRequest proto.InternalMessageInfo

type isX509SVIDRequest_Credentials interface {
	isX509SVIDRequest_Credentials()
}

type X509SVIDRequest_Pid struct {
	Pid int32 `protobuf:"varint,1,opt,name=pid,oneof"`
}
type X509SVIDRequest_PodUuid struct {
	PodUuid string `protobuf:"bytes,2,opt,name=pod_uuid,json=podUuid,oneof"`
}

func (*X509SVIDRequest_Pid) isX509SVIDRequest_Credentials()     {}
func (*X509SVIDRequest_PodUuid) isX509SVIDRequest_Credentials() {}

func (m *X509SVIDRequest) GetCredentials() isX509SVIDRequest_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *X509SVIDRequest) GetPid() int32 {
	if x, ok := m.GetCredentials().(*X509SVIDRequest_Pid); ok {
		return x.Pid
	}
	return 0
}

func (m *X509SVIDRequest) GetPodUuid() string {
	if x, ok := m.GetCredentials().(*X509SVIDRequest_PodUuid); ok {
		return x.PodUuid
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*X509SVIDRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _X509SVIDRequest_OneofMarshaler, _X509SVIDRequest_OneofUnmarshaler, _X509SVIDRequest_OneofSizer, []interface{}{
		(*X509SVIDRequest_Pid)(nil),
		(*X509SVIDRequest_PodUuid)(nil),
	}
}

func _X509SVIDRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*X509SVIDRequest)
	// credentials
	switch x := m.Credentials.(type) {
	case *X509SVIDRequest_Pid:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Pid))
	case *X509SVIDRequest_PodUuid:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.PodUuid)
	case nil:
	default:
		return fmt.Errorf("X509SVIDRequest.Credentials has unexpected type %T", x)
	}
	return nil
}

func _X509SVIDRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*X509SVIDRequest)
	switch tag {
	case 1: // credentials.pid
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Credentials = &X509SVIDRequest_Pid{int32(x)}
		return true, err
	case 2: // credentials.pod_uuid
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Credentials = &X509SVIDRequest_PodUuid{x}
		return true, err
	default:
		return false, nil
	}
}

func _X509SVIDRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*X509SVIDRequest)
	// credentials
	switch x := m.Credentials.(type) {
	case *X509SVIDRequest_Pid:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Pid))
	case *X509SVIDRequest_PodUuid:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.PodUuid)))
		n += len(x.PodUuid)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The X509SVIDResponse message carries a set of X.509 SVIDs and their
// associated information. It also carries a set of global CRLs, and a
// TTL to inform the workload when it should check back next.
type X509SVIDResponse struct {
	// A list of X509SVID messages, each of which includes a single
	// SPIFFE Verifiable Identity Document, along with its private key
	// and bundle.
	Svids []*X509SVID `protobuf:"bytes,1,rep,name=svids" json:"svids,omitempty"`
	// ASN.1 DER encoded
	Crl [][]byte `protobuf:"bytes,2,rep,name=crl,proto3" json:"crl,omitempty"`
	// CA certificate bundles belonging to foreign Trust Domains that the
	// workload should trust, keyed by the SPIFFE ID of the foreign
	// domain. Bundles are ASN.1 DER encoded.
	FederatedBundles     map[string][]byte `protobuf:"bytes,3,rep,name=federated_bundles,json=federatedBundles" json:"federated_bundles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *X509SVIDResponse) Reset()         { *m = X509SVIDResponse{} }
func (m *X509SVIDResponse) String() string { return proto.CompactTextString(m) }
func (*X509SVIDResponse) ProtoMessage()    {}
func (*X509SVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{1}
}
func (m *X509SVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509SVIDResponse.Unmarshal(m, b)
}
func (m *X509SVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509SVIDResponse.Marshal(b, m, deterministic)
}
func (dst *X509SVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509SVIDResponse.Merge(dst, src)
}
func (m *X509SVIDResponse) XXX_Size() int {
	return xxx_messageInfo_X509SVIDResponse.Size(m)
}
func (m *X509SVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_X509SVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_X509SVIDResponse proto.InternalMessageInfo

func (m *X509SVIDResponse) GetSvids() []*X509SVID {
	if m != nil {
		return m.Svids
	}
	return nil
}

func (m *X509SVIDResponse) GetCrl() [][]byte {
	if m != nil {
		return m.Crl
	}
	return nil
}

func (m *X509SVIDResponse) GetFederatedBundles() map[string][]byte {
	if m != nil {
		return m.FederatedBundles
	}
	return nil
}

// The X509SVID message carries a single SVID and all associated
// information, including CA bundles.
type X509SVID struct {
	// The SPIFFE ID of the SVID in this entry
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
	// ASN.1 DER encoded certificate chain. MAY include intermediates,
	// the leaf certificate (or SVID itself) MUST come first.
	X509Svid []byte `protobuf:"bytes,2,opt,name=x509_svid,json=x509Svid,proto3" json:"x509_svid,omitempty"`
	// ASN.1 DER encoded PKCS#8 private key. MUST be unencrypted.
	X509SvidKey []byte `protobuf:"bytes,3,opt,name=x509_svid_key,json=x509SvidKey,proto3" json:"x509_svid_key,omitempty"`
	// CA certificates belonging to the Trust Domain
	// ASN.1 DER encoded
	Bundle               []byte   `protobuf:"bytes,4,opt,name=bundle,proto3" json:"bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *X509SVID) Reset()         { *m = X509SVID{} }
func (m *X509SVID) String() string { return proto.CompactTextString(m) }
func (*X509SVID) ProtoMessage()    {}
func (*X509SVID) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{2}
}
func (m *X509SVID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509SVID.Unmarshal(m, b)
}
func (m *X509SVID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509SVID.Marshal(b, m, deterministic)
}
func (dst *X509SVID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509SVID.Merge(dst, src)
}
func (m *X509SVID) XXX_Size() int {
	return xxx_messageInfo_X509SVID.Size(m)
}
func (m *X509SVID) XXX_DiscardUnknown() {
	xxx_messageInfo_X509SVID.DiscardUnknown(m)
}

var xxx_messageInfo_X509SVID proto.InternalMessageInfo

func (m *X509SVID) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *X509SVID) GetX509Svid() []byte {
	if m != nil {
		return m.X509Svid
	}
	return nil
}

func (m *X509SVID) GetX509SvidKey() []byte {
	if m != nil {
		return m.X509SvidKey
	}
	return nil
}

func (m *X509SVID) GetBundle() []byte {
	if m != nil {
		return m.Bundle
	}
	return nil
}

type X509BundlesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *X509BundlesRequest) Reset()         { *m = X509BundlesRequest{} }
func (m *X509BundlesRequest) String() string { return proto.CompactTextString(m) }
func (*X509BundlesRequest) ProtoMessage()    {}
func (*X509BundlesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{3}
}
func (m *X509BundlesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509BundlesRequest.Unmarshal(m, b)
}
func (m *X509BundlesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509BundlesRequest.Marshal(b, m, deterministic)
}
func (dst *X509BundlesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509BundlesRequest.Merge(dst, src)
}
func (m *X509BundlesRequest) XXX_Size() int {
	return xxx_messageInfo_X509BundlesRequest.Size(m)
}
func (m *X509BundlesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_X509BundlesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_X509BundlesRequest proto.InternalMessageInfo

type X509BundlesResponse struct {
	// x509 certificates, keyed by trust domain URI
	Bundles              map[string][]byte `protobuf:"bytes,1,rep,name=bundles" json:"bundles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *X509BundlesResponse) Reset()         { *m = X509BundlesResponse{} }
func (m *X509BundlesResponse) String() string { return proto.CompactTextString(m) }
func (*X509BundlesResponse) ProtoMessage()    {}
func (*X509BundlesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{4}
}
func (m *X509BundlesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509BundlesResponse.Unmarshal(m, b)
}
func (m *X509BundlesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509BundlesResponse.Marshal(b, m, deterministic)
}
func (dst *X509BundlesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509BundlesResponse.Merge(dst, src)
}
func (m *X509BundlesResponse) XXX_Size() int {
	return xxx_messageInfo_X509BundlesResponse.Size(m)
}
func (m *X509BundlesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_X509BundlesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_X509BundlesResponse proto.InternalMessageInfo

func (m *X509BundlesResponse) GetBundles() map[string][]byte {
	if m != nil {
		return m.Bundles
	}
	return nil
}

type JWTSVID struct {
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
	// Encoded using JWS Compact Serialization
	Svid                 string   `protobuf:"bytes,2,opt,name=svid" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTSVID) Reset()         { *m = JWTSVID{} }
func (m *JWTSVID) String() string { return proto.CompactTextString(m) }
func (*JWTSVID) ProtoMessage()    {}
func (*JWTSVID) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{5}
}
func (m *JWTSVID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTSVID.Unmarshal(m, b)
}
func (m *JWTSVID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTSVID.Marshal(b, m, deterministic)
}
func (dst *JWTSVID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTSVID.Merge(dst, src)
}
func (m *JWTSVID) XXX_Size() int {
	return xxx_messageInfo_JWTSVID.Size(m)
}
func (m *JWTSVID) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTSVID.DiscardUnknown(m)
}

var xxx_messageInfo_JWTSVID proto.InternalMessageInfo

func (m *JWTSVID) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *JWTSVID) GetSvid() string {
	if m != nil {
		return m.Svid
	}
	return ""
}

type JWTSVIDRequest struct {
	Audience []string `protobuf:"bytes,1,rep,name=audience" json:"audience,omitempty"`
	// SPIFFE ID of the JWT being requested
	// If not set, all IDs will be returned
	SpiffeId             string   `protobuf:"bytes,2,opt,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTSVIDRequest) Reset()         { *m = JWTSVIDRequest{} }
func (m *JWTSVIDRequest) String() string { return proto.CompactTextString(m) }
func (*JWTSVIDRequest) ProtoMessage()    {}
func (*JWTSVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{6}
}
func (m *JWTSVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTSVIDRequest.Unmarshal(m, b)
}
func (m *JWTSVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTSVIDRequest.Marshal(b, m, deterministic)
}
func (dst *JWTSVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTSVIDRequest.Merge(dst, src)
}
func (m *JWTSVIDRequest) XXX_Size() int {
	return xxx_messageInfo_JWTSVIDRequest.Size(m)
}
func (m *JWTSVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTSVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JWTSVIDRequest proto.InternalMessageInfo

func (m *JWTSVIDRequest) GetAudience() []string {
	if m != nil {
		return m.Audience
	}
	return nil
}

func (m *JWTSVIDRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

type JWTSVIDResponse struct {
	Svids                []*JWTSVID `protobuf:"bytes,1,rep,name=svids" json:"svids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *JWTSVIDResponse) Reset()         { *m = JWTSVIDResponse{} }
func (m *JWTSVIDResponse) String() string { return proto.CompactTextString(m) }
func (*JWTSVIDResponse) ProtoMessage()    {}
func (*JWTSVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{7}
}
func (m *JWTSVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTSVIDResponse.Unmarshal(m, b)
}
func (m *JWTSVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTSVIDResponse.Marshal(b, m, deterministic)
}
func (dst *JWTSVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTSVIDResponse.Merge(dst, src)
}
func (m *JWTSVIDResponse) XXX_Size() int {
	return xxx_messageInfo_JWTSVIDResponse.Size(m)
}
func (m *JWTSVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTSVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JWTSVIDResponse proto.InternalMessageInfo

func (m *JWTSVIDResponse) GetSvids() []*JWTSVID {
	if m != nil {
		return m.Svids
	}
	return nil
}

type JWTBundlesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTBundlesRequest) Reset()         { *m = JWTBundlesRequest{} }
func (m *JWTBundlesRequest) String() string { return proto.CompactTextString(m) }
func (*JWTBundlesRequest) ProtoMessage()    {}
func (*JWTBundlesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{8}
}
func (m *JWTBundlesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTBundlesRequest.Unmarshal(m, b)
}
func (m *JWTBundlesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTBundlesRequest.Marshal(b, m, deterministic)
}
func (dst *JWTBundlesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTBundlesRequest.Merge(dst, src)
}
func (m *JWTBundlesRequest) XXX_Size() int {
	return xxx_messageInfo_JWTBundlesRequest.Size(m)
}
func (m *JWTBundlesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTBundlesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JWTBundlesRequest proto.InternalMessageInfo

type JWTBundlesResponse struct {
	// JWK sets, keyed by trust domain URI
	Bundles              map[string][]byte `protobuf:"bytes,1,rep,name=bundles" json:"bundles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JWTBundlesResponse) Reset()         { *m = JWTBundlesResponse{} }
func (m *JWTBundlesResponse) String() string { return proto.CompactTextString(m) }
func (*JWTBundlesResponse) ProtoMessage()    {}
func (*JWTBundlesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{9}
}
func (m *JWTBundlesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTBundlesResponse.Unmarshal(m, b)
}
func (m *JWTBundlesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTBundlesResponse.Marshal(b, m, deterministic)
}
func (dst *JWTBundlesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTBundlesResponse.Merge(dst, src)
}
func (m *JWTBundlesResponse) XXX_Size() int {
	return xxx_messageInfo_JWTBundlesResponse.Size(m)
}
func (m *JWTBundlesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTBundlesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JWTBundlesResponse proto.InternalMessageInfo

func (m *JWTBundlesResponse) GetBundles() map[string][]byte {
	if m != nil {
		return m.Bundles
	}
	return nil
}

type ValidateJWTSVIDRequest struct {
	Audience string `protobuf:"bytes,1,opt,name=audience" json:"audience,omitempty"`
	// Encoded using JWS Compact Serialization
	Svid                 string   `protobuf:"bytes,2,opt,name=svid" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateJWTSVIDRequest) Reset()         { *m = ValidateJWTSVIDRequest{} }
func (m *ValidateJWTSVIDRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateJWTSVIDRequest) ProtoMessage()    {}
func (*ValidateJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{10}
}
func (m *ValidateJWTSVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateJWTSVIDRequest.Unmarshal(m, b)
}
func (m *ValidateJWTSVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateJWTSVIDRequest.Marshal(b, m, deterministic)
}
func (dst *ValidateJWTSVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateJWTSVIDRequest.Merge(dst, src)
}
func (m *ValidateJWTSVIDRequest) XXX_Size() int {
	return xxx_messageInfo_ValidateJWTSVIDRequest.Size(m)
}
func (m *ValidateJWTSVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateJWTSVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateJWTSVIDRequest proto.InternalMessageInfo

func (m *ValidateJWTSVIDRequest) GetAudience() string {
	if m != nil {
		return m.Audience
	}
	return ""
}

func (m *ValidateJWTSVIDRequest) GetSvid() string {
	if m != nil {
		return m.Svid
	}
	return ""
}

type ValidateJWTSVIDResponse struct {
	SpiffeId             string           `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
	Claims               *structpb.Struct `protobuf:"bytes,2,opt,name=claims" json:"claims,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ValidateJWTSVIDResponse) Reset()         { *m = ValidateJWTSVIDResponse{} }
func (m *ValidateJWTSVIDResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateJWTSVIDResponse) ProtoMessage()    {}
func (*ValidateJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_f2396234fe172114, []int{11}
}
func (m *ValidateJWTSVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateJWTSVIDResponse.Unmarshal(m, b)
}
func (m *ValidateJWTSVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateJWTSVIDResponse.Marshal(b, m, deterministic)
}
func (dst *ValidateJWTSVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateJWTSVIDResponse.Merge(dst, src)
}
func (m *ValidateJWTSVIDResponse) XXX_Size() int {
	return xxx_messageInfo_ValidateJWTSVIDResponse.Size(m)
}
func (m *ValidateJWTSVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateJWTSVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateJWTSVIDResponse proto.InternalMessageInfo

func (m *ValidateJWTSVIDResponse) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *ValidateJWTSVIDResponse) GetClaims() *structpb.Struct {
	if m != nil {
		return m.Claims
	}
	return nil
}

func init() {
	proto.RegisterType((*X509SVIDRequest)(nil), "X509SVIDRequest")
	proto.RegisterType((*X509SVIDResponse)(nil), "X509SVIDResponse")
	proto.RegisterMapType((map[string][]byte)(nil), "X509SVIDResponse.FederatedBundlesEntry")
	proto.RegisterType((*X509SVID)(nil), "X509SVID")
	proto.RegisterType((*X509BundlesRequest)(nil), "X509BundlesRequest")
	proto.RegisterType((*X509BundlesResponse)(nil), "X509BundlesResponse")
	proto.RegisterMapType((map[string][]byte)(nil), "X509BundlesResponse.BundlesEntry")
	proto.RegisterType((*JWTSVID)(nil), "JWTSVID")
	proto.RegisterType((*JWTSVIDRequest)(nil), "JWTSVIDRequest")
	proto.RegisterType((*JWTSVIDResponse)(nil), "JWTSVIDResponse")
	proto.RegisterType((*JWTBundlesRequest)(nil), "JWTBundlesRequest")
	proto.RegisterType((*JWTBundlesResponse)(nil), "JWTBundlesResponse")
	proto.RegisterMapType((map[string][]byte)(nil), "JWTBundlesResponse.BundlesEntry")
	proto.RegisterType((*ValidateJWTSVIDRequest)(nil), "ValidateJWTSVIDRequest")
	proto.RegisterType((*ValidateJWTSVIDResponse)(nil), "ValidateJWTSVIDResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SpiffeWorkloadAPI service

type SpiffeWorkloadAPIClient interface {
	// JWT-SVID Profile
	FetchJWTSVID(ctx context.Context, in *JWTSVIDRequest, opts ...grpc.CallOption) (*JWTSVIDResponse, error)
	FetchJWTBundles(ctx context.Context, in *JWTBundlesRequest, opts ...grpc.CallOption) (SpiffeWorkloadAPI_FetchJWTBundlesClient, error)
	ValidateJWTSVID(ctx context.Context, in *ValidateJWTSVIDRequest, opts ...grpc.CallOption) (*ValidateJWTSVIDResponse, error)
	// X.509-SVID Profile
	// Fetch all SPIFFE identities the workload is entitled to, as
	// well as related information like trust bundles and CRLs. As
	// this information changes, subsequent messages will be sent.
	FetchX509SVID(ctx context.Context, in *X509SVIDRequest, opts ...grpc.CallOption) (SpiffeWorkloadAPI_FetchX509SVIDClient, error)
	FetchX509Bundles(ctx context.Context, in *X509BundlesRequest, opts ...grpc.CallOption) (SpiffeWorkloadAPI_FetchX509BundlesClient, error)
}

type spiffeWorkloadAPIClient struct {
	cc *grpc.ClientConn
}

func NewSpiffeWorkloadAPIClient(cc *grpc.ClientConn) SpiffeWorkloadAPIClient {
	return &spiffeWorkloadAPIClient{cc}
}

func (c *spiffeWorkloadAPIClient) FetchJWTSVID(ctx context.Context, in *JWTSVIDRequest, opts ...grpc.CallOption) (*JWTSVIDResponse, error) {
	out := new(JWTSVIDResponse)
	err := grpc.Invoke(ctx, "/SpiffeWorkloadAPI/FetchJWTSVID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiffeWorkloadAPIClient) FetchJWTBundles(ctx context.Context, in *JWTBundlesRequest, opts ...grpc.CallOption) (SpiffeWorkloadAPI_FetchJWTBundlesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SpiffeWorkloadAPI_serviceDesc.Streams[0], c.cc, "/SpiffeWorkloadAPI/FetchJWTBundles", opts...)
	if err != nil {
		return nil, err
	}
	x := &spiffeWorkloadAPIFetchJWTBundlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpiffeWorkloadAPI_FetchJWTBundlesClient interface {
	Recv() (*JWTBundlesResponse, error)
	grpc.ClientStream
}

type spiffeWorkloadAPIFetchJWTBundlesClient struct {
	grpc.ClientStream
}

func (x *spiffeWorkloadAPIFetchJWTBundlesClient) Recv() (*JWTBundlesResponse, error) {
	m := new(JWTBundlesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spiffeWorkloadAPIClient) ValidateJWTSVID(ctx context.Context, in *ValidateJWTSVIDRequest, opts ...grpc.CallOption) (*ValidateJWTSVIDResponse, error) {
	out := new(ValidateJWTSVIDResponse)
	err := grpc.Invoke(ctx, "/SpiffeWorkloadAPI/ValidateJWTSVID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiffeWorkloadAPIClient) FetchX509SVID(ctx context.Context, in *X509SVIDRequest, opts ...grpc.CallOption) (SpiffeWorkloadAPI_FetchX509SVIDClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SpiffeWorkloadAPI_serviceDesc.Streams[1], c.cc, "/SpiffeWorkloadAPI/FetchX509SVID", opts...)
	if err != nil {
		return nil, err
	}
	x := &spiffeWorkloadAPIFetchX509SVIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpiffeWorkloadAPI_FetchX509SVIDClient interface {
	Recv() (*X509SVIDResponse, error)
	grpc.ClientStream
}

type spiffeWorkloadAPIFetchX509SVIDClient struct {
	grpc.ClientStream
}

func (x *spiffeWorkloadAPIFetchX509SVIDClient) Recv() (*X509SVIDResponse, error) {
	m := new(X509SVIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spiffeWorkloadAPIClient) FetchX509Bundles(ctx context.Context, in *X509BundlesRequest, opts ...grpc.CallOption) (SpiffeWorkloadAPI_FetchX509BundlesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SpiffeWorkloadAPI_serviceDesc.Streams[2], c.cc, "/SpiffeWorkloadAPI/FetchX509Bundles", opts...)
	if err != nil {
		return nil, err
	}
	x := &spiffeWorkloadAPIFetchX509BundlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpiffeWorkloadAPI_FetchX509BundlesClient interface {
	Recv() (*X509BundlesResponse, error)
	grpc.ClientStream
}

type spiffeWorkloadAPIFetchX509BundlesClient struct {
	grpc.ClientStream
}

func (x *spiffeWorkloadAPIFetchX509BundlesClient) Recv() (*X509BundlesResponse, error) {
	m := new(X509BundlesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SpiffeWorkloadAPI service

type SpiffeWorkloadAPIServer interface {
	// JWT-SVID Profile
	FetchJWTSVID(context.Context, *JWTSVIDRequest) (*JWTSVIDResponse, error)
	FetchJWTBundles(*JWTBundlesRequest, SpiffeWorkloadAPI_FetchJWTBundlesServer) error
	ValidateJWTSVID(context.Context, *ValidateJWTSVIDRequest) (*ValidateJWTSVIDResponse, error)
	// X.509-SVID Profile
	// Fetch all SPIFFE identities the workload is entitled to, as
	// well as related information like trust bundles and CRLs. As
	// this information changes, subsequent messages will be sent.
	FetchX509SVID(*X509SVIDRequest, SpiffeWorkloadAPI_FetchX509SVIDServer) error
	FetchX509Bundles(*X509BundlesRequest, SpiffeWorkloadAPI_FetchX509BundlesServer) error
}

func RegisterSpiffeWorkloadAPIServer(s *grpc.Server, srv SpiffeWorkloadAPIServer) {
	s.RegisterService(&_SpiffeWorkloadAPI_serviceDesc, srv)
}

func _SpiffeWorkloadAPI_FetchJWTSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiffeWorkloadAPIServer).FetchJWTSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpiffeWorkloadAPI/FetchJWTSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiffeWorkloadAPIServer).FetchJWTSVID(ctx, req.(*JWTSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiffeWorkloadAPI_FetchJWTBundles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JWTBundlesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpiffeWorkloadAPIServer).FetchJWTBundles(m, &spiffeWorkloadAPIFetchJWTBundlesServer{stream})
}

type SpiffeWorkloadAPI_FetchJWTBundlesServer interface {
	Send(*JWTBundlesResponse) error
	grpc.ServerStream
}

type spiffeWorkloadAPIFetchJWTBundlesServer struct {
	grpc.ServerStream
}

func (x *spiffeWorkloadAPIFetchJWTBundlesServer) Send(m *JWTBundlesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpiffeWorkloadAPI_ValidateJWTSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateJWTSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiffeWorkloadAPIServer).ValidateJWTSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpiffeWorkloadAPI/ValidateJWTSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiffeWorkloadAPIServer).ValidateJWTSVID(ctx, req.(*ValidateJWTSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiffeWorkloadAPI_FetchX509SVID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(X509SVIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpiffeWorkloadAPIServer).FetchX509SVID(m, &spiffeWorkloadAPIFetchX509SVIDServer{stream})
}

type SpiffeWorkloadAPI_FetchX509SVIDServer interface {
	Send(*X509SVIDResponse) error
	grpc.ServerStream
}

type spiffeWorkloadAPIFetchX509SVIDServer struct {
	grpc.ServerStream
}

func (x *spiffeWorkloadAPIFetchX509SVIDServer) Send(m *X509SVIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpiffeWorkloadAPI_FetchX509Bundles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(X509BundlesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpiffeWorkloadAPIServer).FetchX509Bundles(m, &spiffeWorkloadAPIFetchX509BundlesServer{stream})
}

type SpiffeWorkloadAPI_FetchX509BundlesServer interface {
	Send(*X509BundlesResponse) error
	grpc.ServerStream
}

type spiffeWorkloadAPIFetchX509BundlesServer struct {
	grpc.ServerStream
}

func (x *spiffeWorkloadAPIFetchX509BundlesServer) Send(m *X509BundlesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SpiffeWorkloadAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SpiffeWorkloadAPI",
	HandlerType: (*SpiffeWorkloadAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchJWTSVID",
			Handler:    _SpiffeWorkloadAPI_FetchJWTSVID_Handler,
		},
		{
			MethodName: "ValidateJWTSVID",
			Handler:    _SpiffeWorkloadAPI_ValidateJWTSVID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchJWTBundles",
			Handler:       _SpiffeWorkloadAPI_FetchJWTBundles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchX509SVID",
			Handler:       _SpiffeWorkloadAPI_FetchX509SVID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchX509Bundles",
			Handler:       _SpiffeWorkloadAPI_FetchX509Bundles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v2/proto/spiffe/workload/workload.proto",
}

func init() {
	proto.RegisterFile("v2/proto/spiffe/workload/workload.proto", fileDescriptor_workload_f2396234fe172114)
}

var fileDescriptor_workload_f2396234fe172114 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xbb, 0x49, 0x3f, 0xe2, 0x49, 0x4a, 0x92, 0x4d, 0x69, 0x2d, 0x17, 0x41, 0xf0, 0xa5,
	0xb9, 0xb0, 0x49, 0x03, 0xad, 0x68, 0x40, 0x42, 0x94, 0x52, 0x35, 0xe5, 0x02, 0x4e, 0x69, 0x11,
	0x97, 0xc8, 0xf1, 0x6e, 0x52, 0xab, 0x6e, 0x1c, 0xfc, 0x11, 0xc8, 0x8d, 0x07, 0x40, 0xbc, 0x14,
	0x2f, 0xc2, 0xa3, 0x20, 0xaf, 0x77, 0x0d, 0x76, 0xd2, 0x22, 0x21, 0x71, 0x9b, 0x9d, 0xfd, 0xcf,
	0x78, 0xe6, 0x37, 0xf6, 0x18, 0x76, 0xa6, 0xed, 0xe6, 0xc4, 0x73, 0x03, 0xb7, 0xe9, 0x4f, 0xec,
	0xe1, 0x90, 0x35, 0x3f, 0xbb, 0xde, 0x95, 0xe3, 0x9a, 0x34, 0x31, 0x08, 0xbf, 0xd6, 0xee, 0x8d,
	0x5c, 0x77, 0xe4, 0xb0, 0x58, 0x3c, 0x08, 0x87, 0x4d, 0x3f, 0xf0, 0x42, 0x2b, 0x88, 0x6f, 0xf5,
	0x77, 0x50, 0xfe, 0xb0, 0xd7, 0x3a, 0xe8, 0x9d, 0x77, 0x8f, 0x0c, 0xf6, 0x29, 0x64, 0x7e, 0x80,
	0x31, 0xe4, 0x27, 0x36, 0x55, 0x51, 0x1d, 0x35, 0x56, 0x4e, 0x96, 0x8c, 0xe8, 0x80, 0xb7, 0xa1,
	0x30, 0x71, 0x69, 0x3f, 0x0c, 0x6d, 0xaa, 0xe6, 0xea, 0xa8, 0xa1, 0x9c, 0x2c, 0x19, 0x6b, 0x13,
	0x97, 0xbe, 0x0f, 0x6d, 0x7a, 0xb8, 0x0e, 0x45, 0xcb, 0x63, 0x94, 0x8d, 0x03, 0xdb, 0x74, 0x7c,
	0xfd, 0x27, 0x82, 0xca, 0xef, 0x9c, 0xfe, 0xc4, 0x1d, 0xfb, 0x0c, 0x3f, 0x80, 0x15, 0x7f, 0x6a,
	0x53, 0x5f, 0x45, 0xf5, 0x7c, 0xa3, 0xd8, 0x56, 0x48, 0xa2, 0x88, 0xfd, 0xb8, 0x02, 0x79, 0xcb,
	0x73, 0xd4, 0x5c, 0x3d, 0xdf, 0x28, 0x19, 0x91, 0x89, 0xcf, 0xa0, 0x3a, 0x64, 0x94, 0x79, 0x66,
	0xc0, 0x68, 0x7f, 0x10, 0x8e, 0xa9, 0xc3, 0x7c, 0x35, 0xcf, 0xc3, 0x77, 0x48, 0xf6, 0x01, 0xe4,
	0x58, 0x4a, 0x0f, 0x63, 0xe5, 0xeb, 0x71, 0xe0, 0xcd, 0x8c, 0xca, 0x30, 0xe3, 0xd6, 0x5e, 0xc1,
	0xdd, 0x85, 0xd2, 0xa8, 0x80, 0x2b, 0x36, 0xe3, 0x6d, 0x2b, 0x46, 0x64, 0xe2, 0x0d, 0x58, 0x99,
	0x9a, 0x4e, 0xc8, 0x78, 0xc7, 0x25, 0x23, 0x3e, 0x74, 0x72, 0x4f, 0x91, 0xfe, 0x15, 0x41, 0x41,
	0x56, 0x80, 0xb7, 0x41, 0x89, 0x47, 0xd0, 0x17, 0xd4, 0x14, 0xa3, 0x10, 0x3b, 0xba, 0x11, 0x38,
	0xe5, 0xcb, 0x5e, 0xeb, 0xa0, 0x1f, 0x35, 0x29, 0xf2, 0x14, 0x22, 0x47, 0x6f, 0x6a, 0x53, 0xac,
	0xc3, 0x7a, 0x72, 0xd9, 0x8f, 0x1e, 0x9e, 0xe7, 0x82, 0xa2, 0x14, 0xbc, 0x61, 0x33, 0xbc, 0x09,
	0xab, 0x71, 0xef, 0xea, 0x32, 0xbf, 0x14, 0x27, 0x7d, 0x03, 0x70, 0x54, 0x81, 0x68, 0x41, 0xcc,
	0x4e, 0xff, 0x8e, 0xa0, 0x96, 0x72, 0x0b, 0xfc, 0xcf, 0x60, 0x4d, 0x12, 0x8c, 0x07, 0xf0, 0x90,
	0x2c, 0x90, 0x91, 0x14, 0x3b, 0x19, 0xa1, 0x75, 0xa0, 0xf4, 0xcf, 0xa4, 0x3a, 0xb0, 0x76, 0x7a,
	0x71, 0xf6, 0x77, 0x4e, 0x18, 0x96, 0x13, 0x44, 0x8a, 0xc1, 0x6d, 0xbd, 0x0b, 0x77, 0x44, 0xac,
	0x7c, 0x35, 0x35, 0x28, 0x98, 0x21, 0xb5, 0xd9, 0xd8, 0x62, 0xbc, 0x0f, 0xc5, 0x48, 0xce, 0xe9,
	0xf4, 0xb9, 0x74, 0x7a, 0x7d, 0x17, 0xca, 0x49, 0x2a, 0x81, 0xe4, 0x7e, 0xfa, 0x8d, 0x2c, 0x10,
	0x29, 0x88, 0xdd, 0x7a, 0x0d, 0xaa, 0xa7, 0x17, 0x67, 0x19, 0xbe, 0xdf, 0x10, 0xe0, 0x3f, 0xbd,
	0x22, 0x57, 0x27, 0x8b, 0xb7, 0x4e, 0xe6, 0x55, 0xff, 0x81, 0xee, 0x09, 0x6c, 0x9e, 0x9b, 0x8e,
	0x4d, 0xcd, 0x80, 0xdd, 0x4a, 0x0a, 0xa5, 0x48, 0x2d, 0x62, 0x3d, 0x82, 0xad, 0xb9, 0x4c, 0xa2,
	0xb9, 0x5b, 0xe7, 0xd6, 0x84, 0x55, 0xcb, 0x31, 0xed, 0x6b, 0x9f, 0x67, 0x2b, 0xb6, 0xb7, 0x48,
	0xbc, 0x6e, 0x88, 0x5c, 0x37, 0xa4, 0xc7, 0xd7, 0x8d, 0x21, 0x64, 0xed, 0x1f, 0x39, 0xa8, 0xf6,
	0x78, 0xf4, 0x85, 0xd8, 0x53, 0x2f, 0xdf, 0x76, 0xf1, 0x2e, 0x94, 0x8e, 0x59, 0x60, 0x5d, 0xca,
	0x77, 0xa5, 0x4c, 0xd2, 0xfd, 0x68, 0x15, 0x92, 0x2d, 0xeb, 0x39, 0x94, 0x65, 0x88, 0xe0, 0x87,
	0x31, 0x99, 0x9b, 0x98, 0x56, 0x5b, 0x30, 0x89, 0x16, 0xc2, 0x47, 0x50, 0xce, 0xf4, 0x8b, 0xb7,
	0xc8, 0x62, 0x96, 0x9a, 0x4a, 0x6e, 0x42, 0xb3, 0x0f, 0xeb, 0xbc, 0x86, 0x64, 0x17, 0x54, 0x48,
	0x66, 0x9b, 0x6a, 0xd5, 0xb9, 0x55, 0xd5, 0x42, 0xf8, 0x05, 0x54, 0x92, 0x38, 0x59, 0x7c, 0x8d,
	0xcc, 0x7f, 0xcf, 0xda, 0xc6, 0xa2, 0xcf, 0xb4, 0x85, 0x0e, 0xf7, 0x3f, 0x3e, 0x19, 0xd9, 0xc1,
	0x65, 0x38, 0x20, 0x96, 0x7b, 0x2d, 0xff, 0x00, 0x23, 0xf7, 0x91, 0xb0, 0x6e, 0xfa, 0x37, 0x0c,
	0x56, 0xb9, 0xfb, 0xf1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0xba, 0xaf, 0x25, 0x3e, 0x06,
	0x00, 0x00,
}
